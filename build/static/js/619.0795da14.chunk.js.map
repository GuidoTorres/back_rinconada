{"version":3,"file":"static/js/619.0795da14.chunk.js","mappings":"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","sources":["components/planillas/BuscadorJuntarTeletrans.jsx","components/planillas/pagos/ModalPagosIndividual.jsx","components/planillas/pagos/PagosLayout.jsx"],"sourcesContent":["import React from \"react\";\nimport { useContext, useRef } from \"react\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { CrudContext } from \"../../context/CrudContext\";\nimport { PlanillaContext } from \"../../context/PlanillaContext\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Button, Input } from \"antd\";\nconst { Search } = Input;\nconst BuscadorJuntarTeletrans = ({ registrar }) => {\n  const { pagarVarios, setPagarVarios, multiplesTeletrans } =\n    useContext(PlanillaContext);\n  const [sumar, setSumar] = useState(0);\n  const { setFilterText } = useContext(CrudContext);\n  const handleModal = () => {\n    setPagarVarios(true);\n  };\n\n  useEffect(() => {\n    const sumarSaldos =\n      multiplesTeletrans.length > 0 &&\n      multiplesTeletrans\n        .map((item) => item.saldo % 4)\n        .reduce((partialSum, a) => partialSum + a, 0);\n    setSumar(sumarSaldos);\n  }, [multiplesTeletrans]);\n  return (\n    <div\n      className=\"buscador-container\"\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: \"-30px\",\n        padding: \"20px 0px 0px 0px\",\n      }}\n    >\n      <Search\n        placeholder=\"Ingresa un termino aqui...\"\n        onChange={(e) => setFilterText(e.target.value)}\n        style={{\n          width: 300,\n        }}\n      />\n      <div\n        style={{\n          height: \"50px\",\n          display: \"flex\",\n          alignItems: \"flex-end\",\n          gap: \"5px\",\n        }}\n      >\n        <div>\n          {registrar !== false &&\n          multiplesTeletrans.length > 1 &&\n          sumar === 4 ? (\n            <Button onClick={handleModal} style={{ width: \"150px\" }}>\n              Pagar\n            </Button>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BuscadorJuntarTeletrans;\n","import { Button, Form, Space } from \"antd\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { CrudContext } from \"../../../context/CrudContext\";\nimport { incentivoValues } from \"../../../data/initalValues\";\nimport MainModal from \"../../modal/MainModal\";\nimport { notificacion } from \"../../../helpers/mensajes\";\nimport { AiOutlineForm, AiOutlineTeam } from \"react-icons/ai\";\nimport dayjs from \"dayjs\";\nimport ModalJuntarTeletrans from \"./ModalJuntarTeletrans\";\nimport ButtonAdd from \"../../Button/ButtonAdd\";\n\nfunction ModalPagosIndividual({ open, closeModal, actualizarTabla }) {\n\tconst [form] = Form.useForm();\n\n\tconst {\n\t\tcreateData,\n\t\tgetData,\n\t\tcargando,\n\t\tsetCargando,\n\t\tsetDataToEdit,\n\t\tdataToEdit,\n\t\tupdateData,\n\t} = useContext(CrudContext);\n\n\t// const [incentivo, setIncentivo] = useState(incentivoValues);\n\t// const [trabajadores, setTrabajadores] = useState([]);\n\n\t// const getAllTrabajadores = async () => {\n\t// \tconst response = await getData(\"incentivo/trabajadores\");\n\t// \tsetTrabajadores(response.data);\n\t// };\n\n\t// useEffect(() => {\n\t// \tgetAllTrabajadores();\n\t// }, []);\n\n\t// useEffect(() => {\n\t// \tif (dataToEdit) {\n\t// \t\tsetIncentivo({\n\t// \t\t\t...dataToEdit,\n\t// \t\t\tnombre: dataToEdit.trabajadores[0].nombre,\n\t// \t\t\tteletrans: parseFloat(dataToEdit.trabajadores[0].teletrans),\n\t// \t\t\tobservacion: dataToEdit.observacion,\n\t// \t\t\tfecha_pago: dayjs(dataToEdit.fecha_pago).format(\"YYYY-MM-DD\"),\n\t// \t\t});\n\t// \t\tform.setFieldsValue({\n\t// \t\t\t...dataToEdit,\n\t// \t\t\tnombre: dataToEdit.trabajadores[0].nombre,\n\t// \t\t\tteletrans: parseFloat(dataToEdit.trabajadores[0].teletrans),\n\t// \t\t\tobservacion: dataToEdit.observacion,\n\t// \t\t\tfecha_pago: dayjs(dataToEdit.fecha_pago).format(\"YYYY-MM-DD\"),\n\t// \t\t});\n\t// \t} else {\n\t// \t\tsetIncentivo(incentivoValues);\n\t// \t}\n\t// }, [dataToEdit]);\n\n\t// const handleData = (e, text) => {\n\t// \tif (!text && e.target) {\n\t// \t\tconst { name, value } = e.target;\n\t// \t\tform.setFieldsValue({\n\t// \t\t\t[name]: value,\n\t// \t\t});\n\t// \t\tsetIncentivo((values) => {\n\t// \t\t\treturn { ...values, [name]: value };\n\t// \t\t});\n\t// \t} else {\n\t// \t\tform.setFieldsValue({\n\t// \t\t\t[text]: e,\n\t// \t\t});\n\t// \t\tsetIncentivo((values) => {\n\t// \t\t\treturn { ...values, [text]: e };\n\t// \t\t});\n\t// \t}\n\t// };\n\n\t// const handleSubmit = async () => {\n\t// \tconst route = \"pago/programacion\";\n\t// \tsetCargando(true);\n\t// \tconst incentivoData = {\n\t// \t\tcontrato_id: incentivo.contrato_id || \"\",\n\t// \t\tobservacion: incentivo.observacion || \"\",\n\t// \t\tfecha_pago: dayjs(incentivo.fecha_pago).format(\"YYYY-MM-DD\") || \"\",\n\t// \t\tteletrans: parseFloat(incentivo.teletrans) || 0,\n\t// \t\ttipo: incentivo.tipo || \"incentivo\",\n\t// \t};\n\t// \tif (dataToEdit) {\n\t// \t\tconst response = await updateData(\n\t// \t\t\tincentivoData,\n\t// \t\t\tdataToEdit.pago_id,\n\t// \t\t\t\"pago\"\n\t// \t\t);\n\t// \t\tif (response) {\n\t// \t\t\tnotificacion(response.status, response.msg);\n\t// \t\t\tactualizarTabla();\n\t// \t\t\tcloseModalPago();\n\t// \t\t}\n\t// \t} else {\n\t// \t\tconst response = await createData(incentivoData, route);\n\t// \t\tif (response) {\n\t// \t\t\tnotificacion(response.status, response.msg);\n\t// \t\t\tactualizarTabla();\n\t// \t\t\tcloseModalPago();\n\t// \t\t}\n\t// \t}\n\t// };\n\tconst closeModalPago = () => {\n\t\tcloseModal(false);\n\t\tsetDataToEdit(null);\n\t\tsetCargando(false);\n\t\t// setIncentivo(incentivoValues);\n\t};\n\n\t// const formData = ModalPagosIndividual(\n\t// \tincentivo,\n\t// \thandleData,\n\t// \ttrabajadores,\n\t// \tdataToEdit\n\t// );\n\n\tconst [modalTeletrans, setModalTeletrans] = useState(false);\n\tconst handleOpenModalTeletrans = () => {\n\t\tsetModalTeletrans(true);\n\t};\n\n\tconst handlecloseModalPagoTeletrans = () => {\n\t\tsetModalTeletrans(false);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<MainModal\n\t\t\t\tclassName={\"modal-usuario\"}\n\t\t\t\ttitle={dataToEdit ? \"Editar Pago\" : \"Registrar Pago\"}\n\t\t\t\topen={open}\n\t\t\t\twidth={400}\n\t\t\t\tcloseModal={closeModal}\n\t\t\t>\n\t\t\t\t{!dataToEdit && (\n\t\t\t\t\t<Space\n\t\t\t\t\t\tdirection=\"horizontal\"\n\t\t\t\t\t\tstyle={{ width: \"100%\", justifyContent: \"end\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ButtonAdd\n\t\t\t\t\t\t\ttitle=\"Juntar Teletrans\"\n\t\t\t\t\t\t\tonClick={handleOpenModalTeletrans}\n\t\t\t\t\t\t\ticon={<AiOutlineTeam />}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Space>\n\t\t\t\t)}\n\t\t\t\t{/* <Form\n\t\t\t\t\tform={form}\n\t\t\t\t\tclassName=\"modal-body\"\n\t\t\t\t\tonFinish={handleSubmit}\n\t\t\t\t\tlayout=\"horizontal\"\n\t\t\t\t>\n\t\t\t\t\t{formData.map((item, i) => (\n\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\tclassName={item.className}\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\trules={item.rules}\n\t\t\t\t\t\t\tstyle={{ marginBottom: \"8px\" }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t{item.type}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t))}\n\n\t\t\t\t\t<Form.Item className=\"button-container\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\thtmlType=\"submit\"\n\t\t\t\t\t\t\ticon={<AiOutlineForm />}\n\t\t\t\t\t\t\tloading={cargando ? true : false}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{dataToEdit ? \"Editar\" : \"Registrar\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form.Item>\n\t\t\t\t</Form> */}\n\t\t\t</MainModal>\n\t\t\t{/* {modalTeletrans && (\n\t\t\t\t<ModalJuntarTeletrans\n\t\t\t\t\topen={modalTeletrans}\n\t\t\t\t\tcloseModalPago={handlecloseModalPagoTeletrans}\n\t\t\t\t\ttrabajadores={trabajadores}\n\t\t\t\t\tactualizarTabla={actualizarTabla}\n\t\t\t\t\tcloseModalPagoSubmit={closeModalPago}\n\t\t\t\t/>\n\t\t\t)} */}\n\t\t</>\n\t);\n}\nexport default ModalPagosIndividual;\n","import { Col, Empty, Row } from \"antd\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { AiOutlineForm } from \"react-icons/ai\";\nimport { CrudContext } from \"../../../context/CrudContext\";\nimport { PlanillaContext } from \"../../../context/PlanillaContext\";\nimport { pagosLayout } from \"../../../data/dataTable\";\nimport { notificacion } from \"../../../helpers/mensajes\";\nimport ButtonAdd from \"../../Button/ButtonAdd\";\nimport Header from \"../../header/Header\";\nimport Tabla from \"../../tabla/Tabla\";\nimport BuscadorControlPlanilla from \"../BuscadorControlPlanilla\";\nimport ModalJuntarTeletrans from \"../control/ModalJuntarTeletrans\";\nimport ModalPagosIndividual from \"./ModalPagosIndividual\";\n\nconst PagosLayout = () => {\n  const { getData, createData } = useContext(CrudContext);\n  // const { juntarTeletrans, setJuntarTeletrans } = useContext(PlanillaContext);\n  const [pagos, setPagos] = useState([]);\n\n  const [openModalIndivudual, setOpenModalIndivudual] = useState(false);\n\n  const handleOpenModalIndivudual = () => {\n    setOpenModalIndivudual(true);\n  };\n  const handleCloseModalIndivudual = () => {\n    setOpenModalIndivudual(false);\n  };\n\n  const [openModalAsociacion, setOpenModalAsociacion] = useState(false);\n\n  const handleOpenModalAsociacion = () => {\n    setOpenModalAsociacion(true);\n  };\n  const handleCloseModalAsociacion = () => {\n    setOpenModalAsociacion(false);\n  };\n\n  const [dataPagos, setDataPagos] = useState({\n    observacion: \"\",\n    fecha_pago: \"\",\n    contrato_id: \"\",\n    id: \"\",\n    teletrans: \"\",\n  });\n\n  console.log(pagos);\n\n  const getPagos = async () => {\n    const response = await getData(\"planilla/pagos\");\n\n    if (response) {\n      const filterNull = response.data.filter((item) => item !== null);\n      setPagos(filterNull);\n    }\n  };\n\n  useEffect(() => {\n    getPagos();\n  }, []);\n\n  const handleData = (event, e, i) => {\n    const { name, value } = event.target;\n\n    setPagos((state) =>\n      state.map((item, index) =>\n        index === i\n          ? {\n              ...item,\n              [name]: value,\n              contrato_id: e?.contrato_id,\n              id: e?.pagos?.pagos?.at(-1)?.id || \"\",\n            }\n          : item\n      )\n    );\n  };\n\n  const postPagos = async (e) => {\n    console.log(e);\n    const info = {\n      id: e.pago_id || \"\",\n      contrato_id: e.contrato_id,\n      observacion: e.observacion,\n      fecha_pago: e.fecha_pago,\n      teletrans: e.teletrans,\n    };\n\n    const response = await createData(info, \"pago/programacion\");\n\n    if (response) {\n      notificacion(response.status, response.msg);\n      getPagos();\n    }\n  };\n\n  const columns = pagosLayout(handleData, postPagos);\n\n  return (\n    <>\n      <Header text={\"Programación de pagos\"} ruta={\"/planilla\"} />\n      <div className=\"margenes\">\n        <Row align=\"middle\">\n          <Col span={12}></Col>\n          <Col span={12} align=\"end\">\n            {/* <ButtonAdd\n\t\t\t\t\t\t\ttitle=\"Crear Pago Individual\"\n\t\t\t\t\t\t\tonClick={handleOpenModalIndivudual}\n\t\t\t\t\t\t\ticon={<AiOutlineForm />}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ButtonAdd\n\t\t\t\t\t\t\ttitle=\"Crear Pago Asociación\"\n\t\t\t\t\t\t\tonClick={() => {}}\n\t\t\t\t\t\t\ticon={<AiOutlineForm />}\n\t\t\t\t\t\t/> */}\n          </Col>\n        </Row>\n        {pagos?.length > 0 ? (\n          <Tabla columns={columns} table={pagos} />\n        ) : (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description={<span>No hay registros para mostrar.</span>}\n          />\n        )}\n      </div>\n      {openModalIndivudual && (\n        <ModalPagosIndividual\n          open={openModalIndivudual}\n          closeModal={handleCloseModalIndivudual}\n          actualizarTabla={getPagos}\n        />\n      )}\n    </>\n  );\n};\n\nexport default PagosLayout;\n"],"names":["Input","open","closeModal","actualizarTabla","Form","useContext","CrudContext","dataToEdit","createData","getData","cargando","setCargando","setDataToEdit","updateData","useState","setModalTeletrans","className","title","width","direction","style","justifyContent","ButtonAdd","onClick","icon","pagos","setPagos","openModalIndivudual","setOpenModalIndivudual","observacion","fecha_pago","contrato_id","id","teletrans","console","log","getPagos","response","filterNull","data","filter","item","useEffect","postPagos","e","info","pago_id","notificacion","status","msg","columns","pagosLayout","event","i","target","name","value","state","map","index","at","Header","text","ruta","align","span","length","Tabla","table","image","Empty","description"],"sourceRoot":""}